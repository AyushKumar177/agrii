import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
import os
import keras
from keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.utils import img_to_array
from tensorflow.keras.utils import load_img
from keras.applications.vgg19 import VGG19,preprocess_input,decode_predictions
from keras.layers import Dense,Flatten
from keras.models import Model
from keras.applications.vgg19 import VGG19
from keras.callbacks import ModelCheckpoint,EarlyStopping
from keras.models import load_model
print("done")
train_dg=ImageDataGenerator(zoom_range=0.5,shear_range=0.3,horizontal_flip=True,preprocessing_function=preprocess_input)
valid_dg=ImageDataGenerator(preprocessing_function=preprocess_input)
train=train_dg.flow_from_directory(directory="/content/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/train",target_size=(256,256),batch_size=32)
valid=valid_dg.flow_from_directory(directory="/content/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/valid",target_size=(256,256),batch_size=32)
t_img,label=train.next()
def plotimage(t_img,label):
    for i,l in zip (t_img,label):
        plt.figure(figsize=(3,3))
        plt.imshow(i)
        plt.show()
plotimage(t_img[:2],label[:2])
base_model=VGG19(input_shape=(256,256,3),include_top=False)
for layer in base_model.layers:
    layer.trainable=False
base_model.summary()
x=Flatten()(base_model.output)
x=Dense(units=38,activation='softmax')(x)
model=Model(base_model.input,x)
model.summary()
model.compile(optimizer="adam",loss=keras.losses.categorical_crossentropy,metrics=['accuracy'])
es=EarlyStopping(monitor='val_accuracy',min_delta=0.01,patience=3,verbose=1)
mc=ModelCheckpoint(filepath="best_model.h5",monitor='val_accuracy',min_delta=0.01,patience=3,verbose=1,save_best_only=True)
cb=[es,mc]
his=model.fit_generator(train,steps_per_epoch=16,epochs=32,verbose=1,callbacks=cb,validation_data=valid,validation_steps=16)
h=his.history
h.keys()
model=load_model("/content/best_model.h5")
ref=dict(zip(list(train.class_indices.values()), list(train.class_indices.keys())))
def prediction(path):
  img=load_img(path,target_size=(256,256))
  i=img_to_array(img)
  im=preprocess_input(i)
  img=np.expand_dims(im,axis=0)
  pred=no.argmax(model.predict(img))
  print(ref[pred])
 path=""
prediction(path)
